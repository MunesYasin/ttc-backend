// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  password   String
  role       Role
  subRoleId    Int?
  subRole    SubRole? @relation(fields: [subRoleId], references: [id])

  timezone   String
  email      String  @unique   
  // Personal Information
  nationalId            String  @unique
  hijriBirthDate        DateTime
  gregorianBirthDate    DateTime
  gender                String
  address               String
  absherMobile          String  @unique
  contactMobile         String  @unique
  personalEmail         String  @unique
  
  // Job Information
  department            String?
  totalSalary           Float?
  contractStartDate     DateTime?
  remoteWorkDate        DateTime?
  directManager         String?
  
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  Int?
  employeeRoles  EmployeeRoles?   @relation(fields: [employeeRolesId], references: [id])
  employeeRolesId  Int? @default(1)

  attendances AttendanceRecord[]
  
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
  @@index([nationalId])
  @@index([email])
   @@map("user")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  notionalId  String  @unique
  isSaturdayWork Boolean  @default(false)
  commercialRegistrationNumber  String @unique
  taxNumber String @unique
  address String @unique
  nameOfAuthorizedSignatory String @unique
  emailOfAuthorizedSignatory String @unique
  mobileOfAuthorizedSignatory String @unique
  hrManager1Name String @unique
  hrManager1Email String @unique
  hrManager1Mobile String @unique
  hrManager2Name String @unique
  hrManager2Email String @unique
  hrManager2Mobile String @unique
  accountantName String @unique
  accountantEmail String @unique
  accountantMobile String @unique
  location   String  @default("الرياض")
  
  // Parent company relationship
  parentCompanyId Int?
  parentCompany   Company? @relation("ParentSubcompany", fields: [parentCompanyId], references: [id])
  subcompanies    Company[] @relation("ParentSubcompany")
  
  users     User[]
  reports   DailyReport[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@map("company")
}

model EmployeeRoles{
  id      Int @id @default(autoincrement())
  name    String @unique
  roleTasks   RoleTasks[]
  users   User[]
   @@map("employeeroles")

}

model RoleTasks{
  id                  Int @id @default(autoincrement())
  name                String
  employeeRolesId     Int
  task Task[]
  employeeRoles       EmployeeRoles     @relation(fields: [employeeRolesId], references: [id])
   @@map("roletasks")

}

model AttendanceRecord {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime @db.Date
  clockInAt  DateTime?
  clockOutAt DateTime?
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Many-to-many relationship with Task
  attendanceTasks AttendanceTask[]

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
   @@map("attendancerecord")

}

model Task {
  id          Int      @id @default(autoincrement()) 
  date        DateTime @db.Date
  roleTasksId  Int
  roleTasks    RoleTasks     @relation(fields: [roleTasksId], references: [id])

  duration    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relationship with AttendanceRecord
  attendanceTasks AttendanceTask[]

  @@index([date])
   @@map("task")

}

// Junction table for AttendanceRecord and Task many-to-many relationship
model AttendanceTask {
  id                Int              @id @default(autoincrement())
  attendanceRecord  AttendanceRecord @relation(fields: [attendanceRecordId], references: [id], onDelete: Cascade)
  attendanceRecordId Int
  task              Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            Int
  createdAt         DateTime         @default(now())

  @@unique([attendanceRecordId, taskId])
  @@index([attendanceRecordId])
  @@index([taskId])
   @@map("attendancetask")

}

model DailyReport {
  id         Int      @id @default(autoincrement())
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int
  date       DateTime @db.Date
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
   @@map("dailyreport")

}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  EMPLOYEE
}



enum SubRoles {
  MANAGER
  OPERATION
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  module      String
  action      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  subRolePermission    SubRolePermission[]

  @@unique([module, action])
  @@map("permission")
}

model SubRole {
  id          Int                  @id @default(autoincrement())
  name        SubRoles               @unique // e.g. "MANAGER", "OPERATION"
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
    users   User[]

  
  subRolePermission SubRolePermission[]
  @@map("subrole")

}

model SubRolePermission {
  id           Int        @id @default(autoincrement())
  subRoleId    Int
  permissionId Int
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  subRole      SubRole    @relation(fields: [subRoleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([subRoleId, permissionId])
  @@index([subRoleId])
  @@index([permissionId])
  @@map("subrolepermission")
}
