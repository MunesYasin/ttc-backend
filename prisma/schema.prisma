// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int      @id @default(autoincrement())
  name       String
  password   String
  role       Role
  timezone   String
  email      String  @unique   
  // Personal Information
  nationalId            String  @unique
  hijriBirthDate        DateTime
  gregorianBirthDate    DateTime
  gender                String
  address               String
  absherMobile          String  @unique
  contactMobile         String  @unique
  personalEmail         String  @unique
  
  // Job Information
  department            String
  totalSalary           Float
  contractStartDate     DateTime
  remoteWorkDate        DateTime
  directManager         String
  
  company    Company @relation(fields: [companyId], references: [id])
  companyId  Int
  employeeRoles  EmployeeRoles   @relation(fields: [employeeRolesId], references: [id])
  employeeRolesId  Int @default(1)
  attendances attendanceRecord[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
  @@index([nationalId])
  @@index([email])
  @@map("user")

}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  notionalId  String  @unique
  commercialRegistrationNumber  String @unique
  taxNumber String @unique
  address String @unique
  nameOfAuthorizedSignatory String @unique
  emailOfAuthorizedSignatory String @unique
  mobileOfAuthorizedSignatory String @unique
  hrManager1Name String @unique
  hrManager1Email String @unique
  hrManager1Mobile String @unique
  hrManager2Name String @unique
  hrManager2Email String @unique
  hrManager2Mobile String @unique
  accountantName String @unique
  accountantEmail String @unique
  accountantMobile String @unique
  location   String  @default("الرياض")
  users     user[]
  reports   dailyReport[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    @@map("company")

}

model EmployeeRoles{
  id      Int @id @default(autoincrement())
  name    String @unique
  roleTasks   roleTasks[]
  users   user[]
    @@map("employeeRoles")

}

model roleTasks{
  id                  Int @id @default(autoincrement())
  name                String
  employeeRolesId     Int
  employeeRoles       EmployeeRoles     @relation(fields: [employeeRolesId], references: [id])
    @@map("roleTasks")

}

model attendanceRecord {
  id         Int      @id @default(autoincrement())
  user       user     @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime @db.Date
  clockInAt  DateTime?
  clockOutAt DateTime?
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Many-to-many relationship with task
  attendanceTasks attendanceTask[]

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
    @@map("attendanceRecord")

}

model task {
  id          Int      @id @default(autoincrement()) 
  date        DateTime @db.Date
  title       String
  description String   @db.Text
  duration    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relationship with attendanceRecord
  attendanceTasks attendanceTask[]

  @@index([date])
    @@map("task")

}

// Junction table for attendanceRecord and task many-to-many relationship
model attendanceTask {
  id                Int              @id @default(autoincrement())
  attendanceRecord  attendanceRecord @relation(fields: [attendanceRecordId], references: [id], onDelete: Cascade)
  attendanceRecordId Int
  task              task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            Int
  createdAt         DateTime         @default(now())

  @@unique([attendanceRecordId, taskId])
  @@index([attendanceRecordId])
  @@index([taskId])
    @@map("attendanceTask")

}

model dailyReport {
  id         Int      @id @default(autoincrement())
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int
  date       DateTime @db.Date
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
    @@map("dailyReport")

}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  EMPLOYEE
}
